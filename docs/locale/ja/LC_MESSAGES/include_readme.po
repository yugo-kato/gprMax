# SOME DESCRIPTIVE TITLE.
# Copyright (C) 2015-2025, The University of Edinburgh, United Kingdom.
# Authors: Craig Warren and Antonis Giannopoulos
# This file is distributed under the same license as the gprMax package.
# FIRST AUTHOR <EMAIL@ADDRESS>, 2025.
#
#, fuzzy
msgid ""
msgstr ""
"Project-Id-Version: gprMax 3.1.7\n"
"Report-Msgid-Bugs-To: \n"
"POT-Creation-Date: 2025-03-18 22:01+0900\n"
"PO-Revision-Date: YEAR-MO-DA HO:MI+ZONE\n"
"Last-Translator: FULL NAME <EMAIL@ADDRESS>\n"
"Language: ja\n"
"Language-Team: ja <LL@li.org>\n"
"Plural-Forms: nplurals=1; plural=0;\n"
"MIME-Version: 1.0\n"
"Content-Type: text/plain; charset=utf-8\n"
"Content-Transfer-Encoding: 8bit\n"
"Generated-By: Babel 2.17.0\n"

#: ../../README.rst:-1
msgid "Documentation Status"
msgstr ""

#: ../../README.rst:12
msgid "Getting Started"
msgstr "始める"

#: ../../README.rst:15
msgid "What is gprMax?"
msgstr "gprMaxとは?"

#: ../../README.rst:17
msgid ""
"`gprMax <http://www.gprmax.com>`_ is an open source software that "
"simulates electromagnetic wave propagation. It solves Maxwell's equations"
" in 3D using the Finite-Difference Time-Domain (FDTD) method. gprMax was "
"designed for modelling Ground Penetrating Radar (GPR) but can also be "
"used to model electromagnetic wave propagation for many other "
"applications."
msgstr ""
"`gprMax <http://www.gprmax.com>`_ は電磁波伝搬をシミュレートするオープンソースのソフトウェアです。"
" 3次元のマクスウェル方程式をFDTD(Finite-Difference Time-Domain)法を用いて解きます。"
"gprMaxは地中レーダ(Ground Penetrating Radar, GPR)のモデリングのために設計されましたが"
"それだけではなく、"
"電磁波伝搬モデルとして他の応用にも用いられています。"

#: ../../README.rst:19
msgid ""
"gprMax is currently released under the `GNU General Public License v3 or "
"higher <http://www.gnu.org/copyleft/gpl.html>`_."
msgstr ""
"gprMaxは現在、 `GNU一般公衆ライセンス バージョン3 またはそれ以上のライセンス <http://www.gnu.org/copyleft/gpl.html>`_ "
"で公開されています。"

#: ../../README.rst:21
msgid ""
"gprMax is principally written in `Python <https://www.python.org>`_ 3 "
"with performance-critical parts written in `Cython <http://cython.org>`_."
" It includes a CPU-based solver parallelized using `OpenMP "
"<http://www.openmp.org>`_, and a GPU-based solver written using the "
"`NVIDIA CUDA <https://developer.nvidia.com/cuda-zone>`_ programming "
"model."
msgstr ""
"gprMaxは主に `Python <https://www.python.org>`_ 3 "
"で書かれています。パフォーマンスが重視される部分は `Cython <http://cython.org>`_."
" で書かれています。`OpenMP <http://www.openmp.org>`_ を用いて並列化されたCPUベースのソルバーと、 "
" `NVIDIA CUDA <https://developer.nvidia.com/cuda-zone>`_ を使用して記述されたGPUベースのソルバーが含まれています。 "


#: ../../README.rst:24
msgid "Using gprMax? Cite us"
msgstr "gprMaxを使用されましたか? 引用してください"

#: ../../README.rst:26
msgid ""
"If you use gprMax and publish your work we would be grateful if you could"
" cite our work using the following:"
msgstr ""
"gprMaxを使用したご自身の研究を発表される場合は、"
" 以下のように私たちの研究を引用していただけると幸いです:"

#: ../../README.rst:28
msgid ""
"Warren, C., Giannopoulos, A., & Giannakis I. (2016). gprMax: Open source "
"software to simulate electromagnetic wave propagation for Ground "
"Penetrating Radar, `Computer Physics Communications` "
"(http://dx.doi.org/10.1016/j.cpc.2016.08.020)"
msgstr ""

#: ../../README.rst:30
msgid ""
"For further information on referencing gprMax visit the `Publications "
"section of our website <http://www.gprmax.com/publications.shtml>`_."
msgstr ""
"gprMaxの参照に関する詳細は `ウェブサイトの出版物ページ "
" <http://www.gprmax.com/publications.shtml>`_ をご覧ください。"

#: ../../README.rst:34
msgid "Package Overview"
msgstr "パッケージの概要"

#: ../../README.rst:54
msgid ""
"``conda_env.yml`` is a configuration file for Anaconda (Miniconda) that "
"sets up a Python environment with all the required Python packages for "
"gprMax."
msgstr ""
"``conda_env.yml`` はAnaconda (Miniconda)の設定ファイルで"
"gprMaxにすべての必要なPythonパッケージを含むPython環境をセットアップします。"

#: ../../README.rst:55
msgid ""
"``CONTRIBUTORS`` contains a list of names of people who have contributed "
"to the gprMax codebase."
msgstr ""
"``CONTRIBUTORS`` にはgprMaxコードベースに貢献した人々の名前のリストが含まれています。"

#: ../../README.rst:56
msgid ""
"``docs`` contains source files for the User Guide. The User Guide is "
"written using `reStructuredText "
"<http://docutils.sourceforge.net/rst.html>`_ markup and is built using "
"`Sphinx <http://sphinx-doc.org>`_ and `Read the Docs "
"<https://readthedocs.org>`_."
msgstr ""
"``docs`` はユーザーガイドのソースファイルが含まれています。 ユーザーガイドは "
" `reStructuredText "
"<http://docutils.sourceforge.net/rst.html>`_ のマークアップを用いて書かれています。また "
"`Sphinx <http://sphinx-doc.org>`_ と `Read the Docs "
"<https://readthedocs.org>`_ を使ってビルドされています。"

#: ../../README.rst:57
msgid ""
"``gprMax`` is the main package. Within this package, the main module is "
"``gprMax.py``"
msgstr ""
"``gprMax`` がメインパッケージです。 "
"``gprMax.py`` はパッケージにはメインモジュールです。"

#: ../../README.rst:58
msgid ""
"``gsoc`` contains information for `Google Summer of Code "
"<https://summerofcode.withgoogle.com>`_ program - project ideas and "
"proposal guidance."
msgstr ""
"``gsoc`` は `Google Summer of Code "
"<https://summerofcode.withgoogle.com>`_ プログラムのプロジェクトアイデアと"
"提案の手引についての情報が含まれています。"

#: ../../README.rst:59
msgid ""
"``LICENSE`` contains information on the `GNU General Public License v3 or"
" higher <http://www.gnu.org/copyleft/gpl.html>`_."
msgstr ""
"``LICENSE`` contains information on the `GNU一般公衆ライセンス バージョン3 またはそれ以上のライセンス"
"  <http://www.gnu.org/copyleft/gpl.html>`_ に関する情報が含まれています。"

#: ../../README.rst:60
msgid ""
"``README.rst`` contains getting started information on installation, "
"usage, and new features/changes."
msgstr ""
"``README.rst`` はインストール手順、利用方法、新機能と変更に関する "
"情報が含まれています。"

#: ../../README.rst:61
msgid ""
"``setup.cfg`` is used to set preferences for code formatting/styling "
"using flake8."
msgstr ""
"``setup.cfg`` はflake8を使用したコードフォーマットとスタイリングの環境設定が"
"含まれています。"

#: ../../README.rst:62
msgid "``setup.py`` is used to compile the Cython extension modules."
msgstr "``setup.py`` は Cython 拡張モジュールをコンパイルするために使用されます。"

#: ../../README.rst:63
msgid "``tests`` is a sub-package that contains test modules and input files."
msgstr "``tests`` はテストモジュールと入力ファイルを含むサブパッケージです。"

#: ../../README.rst:64
msgid ""
"``tools`` is a sub-package that contains scripts to assist with viewing "
"and post-processing output from models."
msgstr ""
"``tools`` はモデルから出力された後処理を補助するスクリプトを含むサブパッケージです。 "

#: ../../README.rst:65
msgid ""
"``user_libs`` is a sub-package where useful modules contributed by users "
"are stored."
msgstr ""
"``user_libs`` はユーザーから提供された有用なサブパッケージです。 "

#: ../../README.rst:66
msgid ""
"``user_models`` is a sub-package where useful input files contributed by "
"users are stored."
msgstr ""
"``user_models`` はユーザーから提供された有用な入力ファイルが格納されるサブパッケージです。"

#: ../../README.rst:69
msgid "Installation"
msgstr "インストール"

#: ../../README.rst:71
msgid "The following steps provide guidance on how to install gprMax:"
msgstr "gprMaxをインストールする手順について説明します。:"

#: ../../README.rst:73
msgid ""
"Install Python, and the required Python packages, and get the gprMax "
"source code from GitHub"
msgstr ""
"Pythonと必要なPythonパッケージをインストールし、"
"GitHubからgprMaxのソースコードを手に入れます。"

#: ../../README.rst:74
msgid "Install a C compiler that supports OpenMP"
msgstr "OpenMPをサポートするCコンパイラのインストール"

#: ../../README.rst:75
msgid "Build and install gprMax"
msgstr "gprMaxのビルドとインストール"

#: ../../README.rst:77
msgid ""
"You can `watch screencasts "
"<http://docs.gprmax.com/en/latest/screencasts.html>`_ that demonstrate "
"the installation and update processes."
msgstr ""
"インストールと更新手順をデモンストレーションした `スクリーンキャスト "
"<http://docs.gprmax.com/en/latest/screencasts.html>`_ を視聴できます。"

#: ../../README.rst:80
msgid "1. Install Python, the required Python packages, and get gprMax source"
msgstr "1. Pythonと必要なPythonパッケージをインストールし、gprMaxのソースコードを取得する"

#: ../../README.rst:82
msgid ""
"We recommend using Miniconda to install Python and the required Python "
"packages for gprMax in a self-contained Python environment. Miniconda is "
"a mini version of Anaconda which is a completely free Python distribution"
" (including for commercial use and redistribution). It includes more than"
" 300 of the most popular Python packages for science, math, engineering, "
"and data analysis."
msgstr ""
"gprMaxのためにPythonと必要なPythonパッケージをインストールする"
"自己完結のPython環境として私達はMinicondaを推奨します。 Minicondaは "
"Anacondaのミニバージョンで 完全に自由(商用利用と再配布を含む)なPythonディストリビューションです。"
"それは科学, 数学, 工学とデータ解析のための300以上の主なPythonパッケージを含んでいます。"

#: ../../README.rst:84
msgid ""
"`Download and install Miniconda "
"<https://docs.conda.io/en/latest/miniconda.html>`_. Choose the Python 3.x"
" version for your platform. We recommend choosing the installation "
"options to: install Miniconda only for your user account; add Miniconda "
"to your PATH environment variable; and register Miniconda Python as your "
"default Python. See the `Quick Install page "
"<https://docs.conda.io/projects/conda/en/latest/user-"
"guide/install/index.html>`_ for help installing Miniconda."
msgstr ""
"`Minicondaをダウンロードしインストール <https://docs.conda.io/en/latest/miniconda.html>`_ "
"します。 あなたのプラットフォームにあった Python 3.x"
" バージョンを選択します。 私達はインストールオプションとしてあなたのユーザーアカウントだけにMinicondaをインストールする設定を推奨します。"
"; そしてMiniconda "
"にあなたの PATH 環境変数を追加し; そして register Miniconda Pythonを as your "
"default Pythonとして登録します。 Minicondaのインストールのヘルプとして `クイックインストールページ "
"<https://docs.conda.io/projects/conda/en/latest/user-"
"guide/install/index.html>`_ を見てください。"

#: ../../README.rst:85
msgid ""
"Open a Terminal (Linux/macOS) or Command Prompt (Windows) and run the "
"following commands:"
msgstr ""
"ターミナル (Linux/macOS) または コマンドプロンプト (Windows) を開き、 "
"以下のコマンドを実行します。:"

#: ../../README.rst:95
msgid ""
"This will ensure conda is up-to-date, install Git, get the latest gprMax "
"source code from GitHub, and create an environment for gprMax with all "
"the necessary Python packages."
msgstr ""
"condaが最新であることを確認し、Gitをインストールし、GitHubから最新のgprMax "
"ソースコードを手に入れます。 "
"そして、必要なすべてPythonパッケージを含むgprMax用の環境を作成します。"

#: ../../README.rst:97
msgid ""
"If you prefer to install Python and the required Python packages "
"manually, i.e. without using Anaconda/Miniconda, look in the "
"``conda_env.yml`` file for a list of the requirements."
msgstr ""
"Anaconda/Minicondaを使用せず、Pythonと必要なPythonパッケージ"
"を手動でインストールしたい場合は、 "
"``conda_env.yml`` ファイルを確認してください。"

#: ../../README.rst:99
msgid ""
"If you are using Arch Linux (https://www.archlinux.org/) you may need to "
"also install ``wxPython`` by adding it to the conda environment file "
"(``conda_env.yml``)."
msgstr ""
"Arch Linux (https://www.archlinux.org/) を利用している場合は "
" (``conda_env.yml``) に ``wxPython`` を追加してインストールする必要があるかもしれません。"

#: ../../README.rst:102
msgid "2. Install a C compiler that supports OpenMP"
msgstr "2. OpenMPをサポートするCコンパイラのインストール"

#: ../../README.rst:105
msgid "Linux"
msgstr "Linux"

#: ../../README.rst:107
msgid ""
"`gcc <https://gcc.gnu.org>`_ should be already installed, so no action is"
" required."
msgstr ""
"既に `gcc <https://gcc.gnu.org>`_ はインストールされているため、 何もする必要はありません。"

#: ../../README.rst:111
msgid "macOS"
msgstr "macOS"

#: ../../README.rst:113
msgid ""
"Xcode (the IDE for macOS) comes with the LLVM (clang) compiler, but it "
"does not currently support OpenMP, so you must install `gcc "
"<https://gcc.gnu.org>`_. That said, it is still useful to have Xcode "
"(with command line tools) installed. It can be downloaded from the App "
"Store. Once Xcode is installed, download and install the `Homebrew "
"package manager <http://brew.sh>`_ and then to install gcc, run:"
msgstr ""
"Xcode (macOSのIDE)にはLLVM (clang)コンパイラーが付属しているが、 "
"現在はOpenMPをサポートしていないため, `gcc "
"<https://gcc.gnu.org>`_ をインストールする必要があります。 とはいえ, Xcode "
"(with command line tools)はまだ有用でありインストールする。  App "
"Storeからダウンロードできます。 Xcodeのインストール後に、 `Homebrew "
"パッケージマネージャー <http://brew.sh>`_ をダウンロードしてインストールし、gccをインストールするために, 以下を実行します:"

#: ../../README.rst:120
msgid "Microsoft Windows"
msgstr "Microsoft Windows"

#: ../../README.rst:122
msgid ""
"Download and install Microsoft `Build Tools for Visual Studio 2022 "
"<https://aka.ms/vs/17/release/vs_BuildTools.exe>`_ (direct link). You can"
" also find it on the `Microsoft Visual Studio downloads page "
"<https://visualstudio.microsoft.com/downloads/>`_ by scrolling down to "
"the 'All Downloads' section, clicking the disclosure triangle by 'Tools "
"for Visual Studio 2022', then clicking the download button next to 'Build"
" Tools for Visual Studio 2022'. When installing, choose the 'Desktop "
"development with C++' Workload and select only 'MSVC v143' and 'Windows "
"10 SDK' or 'Windows 11 SDK options."
msgstr ""
"Microsoft `Build Tools for Visual Studio 2022 "
"<https://aka.ms/vs/17/release/vs_BuildTools.exe>`_ (direct link)をダウンロードしインストールします。"
" または `Microsoft Visual Studio のダウンロードページ "
"<https://visualstudio.microsoft.com/downloads/>`_ の'すべてのダウンロード'まで下にスクロールして"
" 'Tools "
"for Visual Studio 2022' の三角形を押して展開し、 'Build"
" Tools for Visual Studio 2022' からダウンロードします。 インストール時に、 'Desktop "
"development with C++' ワークロードを選択し、  'MSVC v143' と 'Windows "
"10 SDK' または 'Windows 11 SDK' を選択します。"

#: ../../README.rst:123
msgid ""
"Set the Path and Environment Variables - this can be done by following "
"the `instructions from Microsoft <https://docs.microsoft.com/en-"
"us/cpp/build/building-on-the-command-"
"line?view=msvc-160#developer_command_file_locations>`_, or manually by "
"adding a form of :code:`C:\\Program Files (x86)\\Microsoft Visual "
"Studio\\2019\\BuildTools\\VC\\Tools\\MSVC\\14.23.28105\\bin\\Hostx64\\x64`"
" (this may vary according to your exact machine and installation) to your"
" system Path environment variable."
msgstr ""
"Pathと環境変数を設定します。 これは "
" `Microsoftの指示 <https://docs.microsoft.com/en-"
"us/cpp/build/building-on-the-command-"
"line?view=msvc-160#developer_command_file_locations>`_ に従って実行します。 またはシステムPath環境変数に "
" :code:`C:\\Program Files (x86)\\Microsoft Visual "
"Studio\\2019\\BuildTools\\VC\\Tools\\MSVC\\14.23.28105\\bin\\Hostx64\\x64`"
" を手動で追加します。(これはマシンとインストール場所により変わります。)"


#: ../../README.rst:125
msgid ""
"Alternatively, if you are using Windows 10/11 you can install the "
"`Windows Subsystem for Linux <https://docs.microsoft.com/en-"
"gb/windows/wsl/about>`_ and then follow the Linux install instructions "
"for gprMax. Note however that currently WSL does not aim to support GUI "
"desktops or applications, e.g. Gnome, KDE, etc...."
msgstr ""
"あるいは別の方法として, Windows 10/11を使用している場合は、"
"`Windows Subsystem for Linux <https://docs.microsoft.com/en-"
"gb/windows/wsl/about>`_ をインストールし、gprMaxをLinuxの手順"
"に従いインストールします。 ただし、 現在の WSL はGnome, KDEなどのGUI デスクトップやアプリケーションをサポートしていません。"

#: ../../README.rst:128
msgid "3. Build and install gprMax"
msgstr "3. gprMaxのビルドとインストール"

#: ../../README.rst:130
msgid ""
"Once you have installed the aforementioned tools follow these steps to "
"build and install gprMax:"
msgstr ""
"上記のツールをインストール後したら以下の手順でgprMaxをビルドしてインストールします。:"

#: ../../README.rst:132
msgid ""
"Open a Terminal (Linux/macOS) or Command Prompt (Windows), navigate into "
"the top-level gprMax directory, and if it is not already active, activate"
" the gprMax conda environment:code:`conda activate gprMax`. Run the "
"following commands:"
msgstr ""
"ターミナル (Linux/macOS) または コマンドプロンプト (Windows)を開き、"
"gprMaxのtop-levelのディレクトに移動します。 もし有効となってなければ, "
"  condaのgprMax環境を :code:`conda activate gprMax` で有効化します。以下のコマンドを "
"実行します。:"

#: ../../README.rst:139
msgid "**You are now ready to proceed to running gprMax.**"
msgstr "**gprMaxを実行する準備が整いました。**"

#: ../../README.rst:142
msgid "Running gprMax"
msgstr "gprMaxを実行する"

#: ../../README.rst:144
msgid ""
"gprMax is designed as a Python package, i.e. a namespace that can contain"
" multiple packages and modules, much like a directory."
msgstr ""
"gprMax は Pythonパッケージとして設計されており、つまり名前空間にディレクトリのように"
" 複数のパッケージとモジュールがあります。"

#: ../../README.rst:146
msgid ""
"Open a Terminal (Linux/macOS) or Command Prompt (Windows), navigate into "
"the top-level gprMax directory, and if it is not already active, activate"
" the gprMax conda environment:code:`conda activate gprMax`."
msgstr ""
"ターミナル (Linux/macOS) または コマンドプロンプト (Windows)を開き、 "
"gprMaxのトップレベルディレクトリに移動します。condaのgprMax環境が有効されていないときには"
" :code:`conda activate gprMax` で有効化します。"

#: ../../README.rst:148
msgid "Basic usage of gprMax is:"
msgstr "gprMax の基本的な使用方法は以下となります。:"

#: ../../README.rst:154
msgid "For example to run one of the test models:"
msgstr "一つのテストモデルを実行する例:"

#: ../../README.rst:160
msgid "When the simulation is complete you can plot the A-scan using:"
msgstr "シミュレーション完了後にAスキャンをプロットできます。:"

#: ../../README.rst:166
msgid ""
"Your results should be like those from the A-scan from the metal cylinder"
" example in `introductory/basic 2D models section "
"<http://docs.gprmax.com/en/latest/examples_simple_2D.html#view-the-"
"results>`_"
msgstr ""
"円柱状の金属のAスキャンの例であり、"
" `入門/基本２次元モデルのページ "
"<http://docs.gprmax.com/en/latest/examples_simple_2D.html#view-the-"
"results>`_ の結果のようになります。"

#: ../../README.rst:168
msgid ""
"When you are finished using gprMax, the conda environment can be "
"deactivated using :code:`conda deactivate`."
msgstr ""
"gprMaxの利用が完了したら、 conda環境を "
" :code:`conda deactivate` により非有効化します。"

#: ../../README.rst:171
msgid "Optional command line arguments"
msgstr "オプションのコマンドライン引数"

#: ../../README.rst:174
msgid "Argument name"
msgstr "引数名"

#: ../../README.rst:174
msgid "Type"
msgstr "型"

#: ../../README.rst:174
msgid "Description"
msgstr "説明"

#: ../../README.rst:176
msgid "``-n``"
msgstr "``-n``"

#: ../../README.rst:176 ../../README.rst:178 ../../README.rst:179
#: ../../README.rst:180
msgid "integer"
msgstr "integer"

#: ../../README.rst:176
msgid ""
"number of times to run the input file. This option can be used to run a "
"series of models, e.g. to create a B-scan with 60 traces: ``(gprMax)$ "
"python -m gprMax user_models/cylinder_Bscan_2D.in -n 60``"
msgstr ""
"number of times to run the input file. This option can be used to run a "
"series of models, e.g. to create a B-scan with 60 traces: ``(gprMax)$ "
"python -m gprMax user_models/cylinder_Bscan_2D.in -n 60``"

#: ../../README.rst:177
msgid "``-gpu``"
msgstr "``-gpu``"

#: ../../README.rst:177
msgid "flag/list"
msgstr "flag/list"

#: ../../README.rst:177
msgid ""
"flag to use NVIDIA GPU or list of NVIDIA GPU device ID(s) for specific "
"GPU card(s), e.g. ``-gpu 0 1``"
msgstr ""
"flag to use NVIDIA GPU or list of NVIDIA GPU device ID(s) for specific "
"GPU card(s), e.g. ``-gpu 0 1``"

#: ../../README.rst:178
msgid "``-restart``"
msgstr "``-restart``"

#: ../../README.rst:178
msgid ""
"model number to start/restart the simulation from. It would typically be "
"used to restart a series of models from a specific model number, with the"
" ``-n`` argument, e.g. to restart from A-scan 45 when creating a B-scan "
"with 60 traces: ``(gprMax)$ python -m gprMax "
"user_models/cylinder_Bscan_2D.in -n 15 -restart 45``"
msgstr ""
"model number to start/restart the simulation from. It would typically be "
"used to restart a series of models from a specific model number, with the"
" ``-n`` argument, e.g. to restart from A-scan 45 when creating a B-scan "
"with 60 traces: ``(gprMax)$ python -m gprMax "
"user_models/cylinder_Bscan_2D.in -n 15 -restart 45``"

#: ../../README.rst:179
msgid "``-task``"
msgstr "``-task``"

#: ../../README.rst:179
msgid ""
"task identifier (model number) when running the simulation as a job array"
" on `Open Grid Scheduler/Grid Engine "
"<http://gridscheduler.sourceforge.net/index.html>`_. For further details "
"see the `parallel performance section of the User Guide "
"<http://docs.gprmax.com/en/latest/openmp_mpi.html>`_"
msgstr ""
"task identifier (model number) when running the simulation as a job array"
" on `Open Grid Scheduler/Grid Engine "
"<http://gridscheduler.sourceforge.net/index.html>`_. For further details "
"see the `parallel performance section of the User Guide "
"<http://docs.gprmax.com/en/latest/openmp_mpi.html>`_"

#: ../../README.rst:180
msgid "``-mpi``"
msgstr "``-mpi``"

#: ../../README.rst:180
msgid ""
"number of Message Passing Interface (MPI) tasks, i.e. master + workers, "
"for MPI task farm. This option is most usefully combined with ``-n`` to "
"allow individual models to be farmed out using a MPI task farm, e.g. to "
"create a B-scan with 60 traces and use MPI to farm out each trace: "
"``(gprMax)$ python -m gprMax user_models/cylinder_Bscan_2D.in -n 60 -mpi "
"61``. For further details see the `parallel performance section of the "
"User Guide <http://docs.gprmax.com/en/latest/openmp_mpi.html>`_"
msgstr ""
"number of Message Passing Interface (MPI) tasks, i.e. master + workers, "
"for MPI task farm. This option is most usefully combined with ``-n`` to "
"allow individual models to be farmed out using a MPI task farm, e.g. to "
"create a B-scan with 60 traces and use MPI to farm out each trace: "
"``(gprMax)$ python -m gprMax user_models/cylinder_Bscan_2D.in -n 60 -mpi "
"61``. For further details see the `parallel performance section of the "
"User Guide <http://docs.gprmax.com/en/latest/openmp_mpi.html>`_"

#: ../../README.rst:181
msgid "``--mpi-no-spawn``"
msgstr "``--mpi-no-spawn``"

#: ../../README.rst:181 ../../README.rst:182 ../../README.rst:183
#: ../../README.rst:184 ../../README.rst:185 ../../README.rst:186
#: ../../README.rst:187
msgid "flag"
msgstr "flag"

#: ../../README.rst:181
msgid ""
"uses MPI task farm without spawn mechanism. For further details see the "
"`parallel performance section of the User Guide "
"<http://docs.gprmax.com/en/latest/openmp_mpi.html>`_"
msgstr ""
"uses MPI task farm without spawn mechanism. For further details see the "
"`parallel performance section of the User Guide "
"<http://docs.gprmax.com/en/latest/openmp_mpi.html>`_"

#: ../../README.rst:182
msgid "``-benchmark``"
msgstr "``-benchmark``"

#: ../../README.rst:182
msgid ""
"switch on benchmarking mode. This can be used to benchmark the threading "
"(parallel) performance of gprMax on different hardware. For further "
"details see the `benchmarking section of the User Guide "
"<http://docs.gprmax.com/en/latest/benchmarking.html>`_"
msgstr ""
"switch on benchmarking mode. This can be used to benchmark the threading "
"(parallel) performance of gprMax on different hardware. For further "
"details see the `benchmarking section of the User Guide "
"<http://docs.gprmax.com/en/latest/benchmarking.html>`_"

#: ../../README.rst:183
msgid "``--geometry-only``"
msgstr "``--geometry-only``"

#: ../../README.rst:183
msgid ""
"build a model and produce any geometry views but does not run the "
"simulation, e.g. to check the geometry of a model is correct: ``(gprMax)$"
" python -m gprMax user_models/heterogeneous_soil.in --geometry-only``"
msgstr ""

#: ../../README.rst:184
msgid "``--geometry-fixed``"
msgstr "``--geometry-fixed``"

#: ../../README.rst:184
msgid ""
"runs a series of models where the geometry does not change between "
"models, e.g. a B-scan where *only* the position of simple sources and "
"receivers, moved using ``#src_steps`` and ``#rx_steps``, changes between "
"models."
msgstr ""

#: ../../README.rst:185
msgid "``--opt-taguchi``"
msgstr "``--opt-taguchi``"

#: ../../README.rst:185
msgid ""
"runs a series of models using an optimization process based on Taguchi's "
"method. For further details see the `user libraries section of the User "
"Guide <http://docs.gprmax.com/en/latest/user_libs_opt_taguchi.html>`_"
msgstr ""

#: ../../README.rst:186
msgid "``--write-processed``"
msgstr "``--write-processed``"

#: ../../README.rst:186
msgid ""
"writes another input file after any Python code and include commands in "
"the original input file have been processed. Useful for checking that any"
" Python code is being correctly processed into gprMax commands."
msgstr ""

#: ../../README.rst:187
msgid "``-h`` or ``--help``"
msgstr ""

#: ../../README.rst:187
msgid "is used to get help on command line options."
msgstr "コマンドラインオプションのヘルプを表示"

#: ../../README.rst:191
msgid "Updating gprMax"
msgstr "gprMaxの更新"

#: ../../README.rst:193
msgid ""
"Open a Terminal (Linux/macOS) or Command Prompt (Windows), navigate into "
"the top-level gprMax directory, and if it is not already active, activate"
" the gprMax conda environment :code:`conda activate gprMax`. Run the "
"following commands:"
msgstr ""
"ターミナル (Linux/macOS) または コマンドプロンプト (Windows)を開き、"
"gprMaxのトップレベルディレクトリに移動し、 もしgprMaxのconda環境が有効化されていなければ、"
"  :code:`conda activate gprMax` により有効化します。 "
"以下のコマンドを実行します。:"

#: ../../README.rst:202
msgid ""
"This will pull the most recent gprMax source code from GitHub, "
"remove/clean previously built modules, and then build and install the "
"latest version of gprMax."
msgstr ""
"これはGitHubから最新のgprMaxソースコードを取得し、"
"以前にビルドしたモジュールを削除/クリーニングし、 "
"最新のgprMaxをビルドとインストールします。"

#: ../../README.rst:206
msgid "Updating conda and Python packages"
msgstr "condaとPythonパッケージの更新"

#: ../../README.rst:208
msgid ""
"Periodically you should update conda and the required Python packages. "
"With the gprMax environment deactivated and from the top-level gprMax "
"directory, run the following commands:"
msgstr ""
"定期的にcondaと必要なPythonパッケージを更新する必要あります。"
"gprMax環境をdeactivatedしてgprMaxのトップレベルディレクトリに移動し、"
"次のコマンドを実行します。:"

#: ../../README.rst:216
msgid "Thanks To Our Contributors ✨🔗"
msgstr "貢献者の皆様に感謝 ✨🔗"

